{"version":3,"sources":["images/home_page_hand.png","constants/constRoutes.js","components/General/Buttons/ButtonStartGame.js","components/Layouts/HomePage/HomePage.js","components/General/Hamburger/Hamburger.js","components/DataDisplay/EarnedList/EarnedList.js","components/DataDisplay/QuestionTitle/QuestionTitle.js","components/DataDisplay/AnswerItem/AnswerItem.js","components/DataDisplay/AnswerList/AnswerList.js","components/DataDisplay/QuestionContent/QuestionContent.js","components/Layouts/GamePage/GamePage.js","actions/totalScoreActions.js","constants/constTypes.js","components/Layouts/GameOverPage/GameOverPage.js","routes/RoutesLayout.js","services/getQuestionsAPI.js","containers/App.js","actions/questionsActions.js","reducers/questionsReducer/questionsReducer.js","reducers/totalScoreReducer/totalScoreReducer.js","reducers/mainReducer.js","store/store.js","serviceWorker.js","index.js"],"names":["module","exports","routes","name","href","ButtonStartGame","props","title","route","className","to","HomePage","src","hand","alt","Hamburger","openMenu","onClick","EarnedList","questionList","currentQuestion","sort","a","b","id","list","map","item","key","money","QuestionTitle","AnswerItem","answer","numberList","selectedAnswer","showCorrectAnswer","correctAnswer","showWrongAnswer","hovered","onMouseOver","e","target","classList","contains","add","previousSibling","onMouseOut","remove","AnswerList","answerList","i","QuestionContent","question","answers","GamePage","timeoutCorrectAnswer","timeoutWrongAnswer","generalQuestionList","useSelector","state","questionsReducer","questions","useState","setOpenMenu","questionNumber","setQuestionNumber","currentQuestionInfo","history","useHistory","dispatch","useDispatch","setSelectedAnswer","setShowCorrectAnswer","setShowWrongAnswer","setHovered","useEffect","clearTimeout","length","find","data","setTimeout","checkAnswer","score","type","payload","push","GameOverPage","totalScore","totalScoreReducer","RoutesLayout","exact","path","component","getQuestionsAPI","url","fetch","then","response","json","console","error","App","log","initState","action","combineReducers","ConfigStore","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","mainReducer","applyMiddleware","thunk","Boolean","location","hostname","match","rootElement","document","getElementById","store","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.88d83cff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home_page_hand.2be9a6ee.png\";","export const routes = {\r\n    home: {name: 'main', href: '/'},\r\n    game: {name: 'Game', href: '/game'},\r\n    result: {name: 'score', href: '/result'}\r\n};","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport './ButtonStartGame.css';\r\n\r\nconst ButtonStartGame = (props) => {\r\n\r\n    const {title, route} = props;\r\n\r\n    return (\r\n        <button className=\"button-start-game\">\r\n            <Link className=\"button-start-game-link\" to={route}>{title}</Link>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default ButtonStartGame;","import React from \"react\";\r\nimport \"./HomePage.css\";\r\nimport ButtonStartGame from \"../../General/Buttons/ButtonStartGame\";\r\nimport {routes} from '../../../constants/constRoutes';\r\nimport hand from '../../../images/home_page_hand.png';\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"home-page\">\r\n            <div className=\"box-split\">\r\n            </div>\r\n\r\n            <img className=\"home-page-image\" src={hand} alt=\"hand\" />\r\n\r\n            <div className=\"home-page-content\">\r\n                <h2 className=\"home-page-content-title\">\r\n                    Who wants to be aÂ millionaire?\r\n                </h2>\r\n                <ButtonStartGame title=\"Start\" route={routes.game.href}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;","import React from \"react\";\r\nimport \"./Hamburger.css\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst Hamburger = (props) => {\r\n\r\n    const {openMenu, onClick} = props;\r\n\r\n    return (\r\n        <div className=\"hamburger\" onClick={onClick}>\r\n            {openMenu\r\n                ?\r\n                <i className=\"fas fa-times hamburger-icon\">\r\n                </i>\r\n                :\r\n                <i className=\"fas fa-bars hamburger-icon\">\r\n                </i>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nHamburger.propTypes = {\r\n    openMenu: propTypes.bool,\r\n    onClick: propTypes.func\r\n};\r\n\r\nexport default Hamburger;","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./EarnedList.css\";\r\n\r\n\r\nconst EarnedList = (props) => {\r\n\r\n    const {openMenu, questionList, currentQuestion} = props;\r\n\r\n    questionList.sort((a,b) => b.id - a.id);\r\n\r\n    const list = questionList.map(item =>\r\n            <li key={item.id} className=\"earner-list-item\">\r\n                <div\r\n                    className={`earner-list-item-line\r\n                    ${(item.id === currentQuestion) ? \"earner-list-item-line--current\" : \"\"}`}>\r\n                </div>\r\n                <span\r\n                    className={`earner-list-item-content\r\n                    ${(item.id === currentQuestion) ? \"earner-list-item-content--current\" : \"\"}\r\n                    ${(item.id < currentQuestion) ? \"earner-list-item-content--earned\" : \"\"}`}>\r\n                {`$${item.money}`}\r\n                </span>\r\n            </li>\r\n        );\r\n\r\n    return (\r\n        <nav className={`earner-nav ${openMenu ? \"earner-nav-open\" : \"earner-nav-close\"}`}>\r\n            <ul className=\"earner-list\">\r\n                {list}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nEarnedList.propTypes = {\r\n    openMenu: propTypes.bool,\r\n    questionList: propTypes.array,\r\n    currentQuestion: propTypes.number\r\n};\r\n\r\nexport default EarnedList;","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./QuestionTitle.css\";\r\n\r\nconst QuestionTitle = (props) => {\r\n\r\n    const {title} = props;\r\n\r\n    return (\r\n        <p className=\"question-title\">\r\n            {title}\r\n        </p>\r\n    );\r\n};\r\n\r\nQuestionTitle.propTypes = {\r\n    title: propTypes.string\r\n};\r\n\r\nexport default QuestionTitle;","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./AnswerItem.css\";\r\n\r\nconst AnswerItem = (props) => {\r\n\r\n    const {answer, onClick, numberList, selectedAnswer, showCorrectAnswer, correctAnswer, showWrongAnswer, hovered} = props;\r\n\r\n    const handlerClick = () => {\r\n        onClick(answer);\r\n    };\r\n\r\n    const handlerHover = (e) => {\r\n        if(e.target.classList.contains(\"answer-list-item-content\")) {\r\n            e.target.classList.add('answer-list-item-content--hover');\r\n            e.target.previousSibling.classList.add('answer-list-item-line--hover');\r\n        }\r\n    };\r\n\r\n    const handlerHoverOut = (e) => {\r\n        if(e.target.classList.contains(\"answer-list-item-content\")) {\r\n            e.target.classList.remove('answer-list-item-content--hover');\r\n            e.target.previousSibling.classList.remove('answer-list-item-line--hover');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <li\r\n            className=\"answer-list-item\"\r\n            onMouseOver={hovered ? handlerHover : ()=>{}}\r\n            onMouseOut={hovered ? handlerHoverOut : ()=>{}}\r\n        >\r\n            <div\r\n                className={`answer-list-item-line\r\n                ${answer === selectedAnswer ? \"answer-list-item-line--selected\" : \" \"}\r\n                ${(showCorrectAnswer && answer === correctAnswer) ? \"answer-list-item-line--correct\" : \" \"}\r\n                ${(showWrongAnswer && answer === selectedAnswer && selectedAnswer !== correctAnswer) ? \"answer-list-item-line--wrong\" : \" \"}`}>\r\n            </div>\r\n            <div\r\n                className={`answer-list-item-content\r\n                ${answer === selectedAnswer ? \"answer-list-item-content--selected\" : \" \"}\r\n                ${(showCorrectAnswer && answer === correctAnswer) ? \"answer-list-item-content--correct\" : \" \"}\r\n                ${(showWrongAnswer && answer === selectedAnswer && selectedAnswer !== correctAnswer) ? \"answer-list-item-content--wrong\" : \" \"}`}\r\n                onClick={handlerClick}\r\n            >\r\n                <span className=\"answer-list-item-number\">\r\n                    {numberList}\r\n                </span>\r\n                <span>\r\n                    {answer}\r\n                </span>\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\nAnswerItem.propTypes = {\r\n    answer: propTypes.string,\r\n    onClick: propTypes.func,\r\n    numberList: propTypes.string,\r\n    selectedAnswer: propTypes.string,\r\n    showCorrectAnswer: propTypes.bool,\r\n    correctAnswer: propTypes.string,\r\n    showWrongAnswer: propTypes.bool,\r\n    hovered: propTypes.bool\r\n};\r\n\r\nexport default AnswerItem;","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./AnswerList.css\";\r\nimport AnswerItem from \"../AnswerItem/AnswerItem\";\r\n\r\nconst AnswerList = (props) => {\r\n\r\n    const {answerList, correctAnswer, onClick, selectedAnswer, showCorrectAnswer, showWrongAnswer, hovered} = props;\r\n    let list = null;\r\n    let numberList = [\"A\", \"B\", \"C\", \"D\"];\r\n\r\n    if (answerList) {\r\n\r\n        list = answerList.map((item, i) =>\r\n            <AnswerItem\r\n                key={i}\r\n                answer={item}\r\n                onClick={!selectedAnswer ? onClick : ()=>{}}\r\n                numberList={numberList[i]}\r\n                selectedAnswer={selectedAnswer}\r\n                showCorrectAnswer={showCorrectAnswer}\r\n                showWrongAnswer={showWrongAnswer}\r\n                correctAnswer={correctAnswer}\r\n                hovered={hovered}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ul className={`answer-list`}>\r\n            {list}\r\n        </ul>\r\n    );\r\n};\r\n\r\nAnswerList.propTypes = {\r\n    answerList: propTypes.array,\r\n    correctAnswer: propTypes.string,\r\n    onClick: propTypes.func,\r\n    selectedAnswer: propTypes.string,\r\n    showCorrectAnswer: propTypes.bool,\r\n    showWrongAnswer: propTypes.bool,\r\n    hovered: propTypes.bool\r\n};\r\n\r\nexport default AnswerList;","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./QuestionContent.css\";\r\nimport QuestionTitle from \"../QuestionTitle/QuestionTitle\";\r\nimport AnswerList from \"../AnswerList/AnswerList\";\r\n\r\nconst QuestionContent = (props) => {\r\n\r\n    const {currentQuestion, onClick, selectedAnswer, showCorrectAnswer, showWrongAnswer, hovered} = props;\r\n\r\n    return (\r\n        <div className=\"question-content\">\r\n            <QuestionTitle title={currentQuestion.question} />\r\n            <AnswerList\r\n                answerList={currentQuestion.answers}\r\n                correctAnswer={currentQuestion.correctAnswer}\r\n                onClick={onClick}\r\n                selectedAnswer={selectedAnswer}\r\n                showCorrectAnswer={showCorrectAnswer}\r\n                showWrongAnswer={showWrongAnswer}\r\n                hovered={hovered}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nQuestionContent.propTypes = {\r\n    currentQuestion: propTypes.object,\r\n    onClick: propTypes.func,\r\n    selectedAnswer: propTypes.string,\r\n    showCorrectAnswer: propTypes.bool,\r\n    showWrongAnswer: propTypes.bool,\r\n    hovered: propTypes.bool\r\n};\r\n\r\nexport default QuestionContent;","import React, {useEffect, useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./GamePage.css\";\r\nimport Hamburger from \"../../General/Hamburger/Hamburger\";\r\nimport EarnedList from \"../../DataDisplay/EarnedList/EarnedList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport QuestionContent from \"../../DataDisplay/QuestionContent/QuestionContent\";\r\nimport {routes} from '../../../constants/constRoutes';\r\nimport * as totalScoreActions from \"../../../actions/totalScoreActions\";\r\n\r\nconst GamePage = () => {\r\n\r\n    const generalQuestionList = useSelector(state => state.questionsReducer.questions);\r\n    const [openMenu, setOpenMenu] = useState(false);\r\n    const [questionNumber, setQuestionNumber] = useState(1);\r\n    let currentQuestionInfo = {};\r\n    let history = useHistory();\r\n    const dispatch = useDispatch();\r\n    let [selectedAnswer, setSelectedAnswer] = useState(\"\");\r\n    let [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\r\n    let [showWrongAnswer, setShowWrongAnswer] = useState(false);\r\n    let [hovered, setHovered] = useState(true);\r\n    let timeoutCorrectAnswer;\r\n    let timeoutWrongAnswer;\r\n\r\n    useEffect(()=>{\r\n        clearTimeout(timeoutCorrectAnswer);\r\n        clearTimeout(timeoutWrongAnswer);\r\n    });\r\n\r\n    if(generalQuestionList.length > 0) {\r\n        currentQuestionInfo = generalQuestionList.find(item => item.id === questionNumber);\r\n    }\r\n\r\n    const checkAnswer = (data) => {\r\n        setSelectedAnswer(data);\r\n        setHovered(false);\r\n\r\n        timeoutCorrectAnswer = setTimeout(()=>{\r\n            setShowCorrectAnswer(true);\r\n        }, 2000);\r\n\r\n        timeoutWrongAnswer = setTimeout(()=>{\r\n            setShowWrongAnswer(true);\r\n        }, 2000);\r\n    };\r\n\r\n    const showMenu = () => {\r\n        setOpenMenu(!openMenu);\r\n    };\r\n\r\n    const changeQuestion = (data) => {\r\n\r\n        if (questionNumber > 0 && questionNumber <= generalQuestionList.length) {\r\n\r\n            checkAnswer(data);\r\n\r\n            setTimeout(\r\n                () => {\r\n                    if (data === currentQuestionInfo.correctAnswer) {\r\n                        setQuestionNumber(questionNumber + 1);\r\n                        setSelectedAnswer(\"\");\r\n                        setShowCorrectAnswer(false);\r\n                        setShowWrongAnswer(false);\r\n                        setHovered(true);\r\n\r\n                        dispatch(totalScoreActions.setTotalScore(currentQuestionInfo.money));\r\n                    } else {\r\n                        history.push(routes.result.href);\r\n                    }\r\n                }, 4000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"game-page\">\r\n            <Hamburger\r\n                openMenu={openMenu}\r\n                onClick={showMenu}\r\n            />\r\n\r\n            <QuestionContent\r\n                currentQuestion={currentQuestionInfo}\r\n                onClick={changeQuestion}\r\n                selectedAnswer={selectedAnswer}\r\n                showCorrectAnswer={showCorrectAnswer}\r\n                showWrongAnswer={showWrongAnswer}\r\n                hovered={hovered}\r\n            />\r\n\r\n            <EarnedList\r\n                openMenu={openMenu}\r\n                questionList={generalQuestionList}\r\n                currentQuestion={questionNumber}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GamePage;\r\n","import * as types from \"../constants/constTypes\";\r\n\r\nexport function setTotalScore(score) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: types.ADD_TOTAL_SCORE,\r\n            payload: score\r\n        });\r\n    };\r\n}","export const ADD_ALL_QUESTIONS = \"ADD_ALL_QUESTIONS\";\r\nexport const ADD_TOTAL_SCORE = \"ADD_TOTAL_SCORE\";\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport \"./GameOverPage.css\";\r\nimport ButtonStartGame from \"../../General/Buttons/ButtonStartGame\";\r\nimport {routes} from '../../../constants/constRoutes';\r\nimport hand from '../../../images/home_page_hand.png';\r\n\r\nconst GameOverPage = () => {\r\n\r\n    let totalScore = useSelector(state => state.totalScoreReducer.totalScore);\r\n\r\n    return (\r\n        <div className=\"game-over-page\">\r\n\r\n            <img className=\"game-over-page-image\" src={hand} alt=\"hand\" />\r\n\r\n            <div className=\"game-over-page-content\">\r\n                <h2 className=\"game-over-page-content-title\">Total score:</h2>\r\n                <h2 className=\"game-over-page-content-result\">\r\n                    {`$ ${totalScore} earned`}\r\n                </h2>\r\n                <ButtonStartGame title=\"Try again\" route={routes.game.href}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameOverPage;","import React from 'react';\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport {routes} from '../constants/constRoutes';\r\nimport HomePage from \"../components/Layouts/HomePage/HomePage\";\r\nimport GamePage from \"../components/Layouts/GamePage/GamePage\";\r\nimport GameOverPage from \"../components/Layouts/GameOverPage/GameOverPage\";\r\n\r\n\r\nconst RoutesLayout = () => {\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path={routes.home.href} component={HomePage}/>\r\n            <Route exact path={routes.game.href} component={GamePage}/>\r\n            <Route exact path={routes.result.href} component={GameOverPage}/>\r\n        </Switch>\r\n    )\r\n};\r\n\r\nexport default RoutesLayout;","const getQuestionsAPI = async (url) => {\r\n    try {\r\n        return await fetch(url).then((response) => response.json());\r\n    } catch (error) {\r\n        console.error(\"Error:\", error);\r\n    }\r\n};\r\n\r\nexport default getQuestionsAPI;","import React, {useEffect} from 'react';\nimport { useDispatch } from \"react-redux\";\nimport RoutesLayout from \"../routes/RoutesLayout\";\nimport \"./App.css\";\nimport getQuestionsAPI from \"../services/getQuestionsAPI\";\nimport * as questionsActions from \"../actions/questionsActions\";\n\nconst App = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        getQuestionsAPI(\"questions.json\").then((data) => {\n            console.log(\"Received data from url -->\", data);\n            dispatch(questionsActions.getList(data));\n        });\n    });\n\n    return (\n    <div className=\"app\">\n      <RoutesLayout/>\n    </div>\n    );\n};\n\nexport default App;\n","import * as types from \"../constants/constTypes\";\r\n\r\nexport function getList(list) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: types.ADD_ALL_QUESTIONS,\r\n            payload: list\r\n        });\r\n    };\r\n}","import * as types from \"../../constants/constTypes\";\r\n\r\nconst initState = {\r\n    questions: []\r\n};\r\n\r\nconst questionsReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_ALL_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                ...{ questions: action.payload }\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default questionsReducer;","import * as types from \"../../constants/constTypes\";\r\n\r\nconst initState = {\r\n    totalScore: \"0\"\r\n};\r\n\r\nconst totalScoreReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_TOTAL_SCORE:\r\n            return {\r\n                ...state,\r\n                ...{ totalScore: action.payload }\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default totalScoreReducer;","import { combineReducers } from \"redux\";\r\nimport questionsReducer from \"./questionsReducer/questionsReducer\";\r\nimport totalScoreReducer from \"./totalScoreReducer/totalScoreReducer\";\r\n\r\nexport default combineReducers({\r\n    questionsReducer,\r\n    totalScoreReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport mainReducer from \"../reducers/mainReducer\";\r\n\r\nfunction ConfigStore(initState) {\r\n    const composeEnhancers =\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n    const store = createStore(\r\n        mainReducer,\r\n        initState,\r\n        composeEnhancers(applyMiddleware(thunk))\r\n    );\r\n    return store;\r\n}\r\n\r\nexport default ConfigStore;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App\";\nimport ConfigStore from \"./store/store\";\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nconst store = ConfigStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>, rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}